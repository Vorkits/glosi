import telebot
from telebot import types
import psycopg2
bot = telebot.TeleBot('914404855:AAEoc0ye_05EMpMaD5m43kytpkPhOL54pHQ')
users={}
zakazi={}
to_base=lambda s:"'"+str(s)+"'"
def reply_city():
    markup=types.ReplyKeyboardMarkup(one_time_keyboard = True)
    cities=['–ê–ª–º–∞—Ç—ã','–ê—Å—Ç–∞–Ω–∞(–ù—É—Ä-–°—É–ª—Ç–∞–Ω)','–ö–∞—Ä–∞–≥–∞–Ω–¥–∞','–ê–∫—Ç–∞—É','–®—ã–º–∫–µ–Ω—Ç','–î—Ä—É–≥–æ–π']
    for i in cities:
        markup.add(i)
    return markup
def sql_query(sql):
    f=''
    try:
        conn = psycopg2.connect(dbname='dbl897lkr3kqj0', user='gyvyzqvrydwlxe', 
                                password='44826dd7802986c134535b8c9724edbe06185e69c372d144a0f554ad59bdf040', host='ec2-79-125-26-232.eu-west-1.compute.amazonaws.com')
        conn.autocommit = True

        cur = conn.cursor()
        cur.execute(sql)
        f=cur.fetchall()
        conn.close()
    except Exception as e:
        print (e)
    try:
        conn.close()
    except:
        print()
    return f

def reply_city():
    markup=types.ReplyKeyboardMarkup(one_time_keyboard = True)
    cities=['–ê–ª–º–∞—Ç—ã','–ê—Å—Ç–∞–Ω–∞(–ù—É—Ä-–°—É–ª—Ç–∞–Ω)','–ö–∞—Ä–∞–≥–∞–Ω–¥–∞','–ê–∫—Ç–∞—É','–®—ã–º–∫–µ–Ω—Ç','–õ—Ä—É–≥–æ–π']
    for i in cities:
        markup.add(i)
    return markup

def start_bot(config):
    def showcategory(message):
        bot.send_message(message.from_user.id,' ',reply_markup=config.get_categoryes())
    @bot.message_handler(commands=['start'])
    def start_message(message):
        mes=config.work_message
        reply=types.ReplyKeyboardMarkup(resize_keyboard=True)
        reply.add('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
        bot.send_message(message.from_user.id, mes,reply_markup=reply)
    @bot.message_handler(content_types=['text'])
    def text(message):
        def city_finish(message):
            users[message.from_user.id]['city']=message.text
            # sql_query('INSERT INTO users (name,phone,city) VALUES ({},{},{})'.format(to_base(users[message.from_user.username]['name']),to_base(users[message.from_user.username]['phone']),to_base(users[message.from_user.username]['city'])))
            mes='–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã.'
            # users.pop(message.from_user.username,1)
            m=bot.send_message(message.from_user.id, mes,reply_markup=config.get_categoryes())
        def phone_city(message):
            users[message.from_user.id]['phone']=message.text
            mes='–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µüîΩ'
            # –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
            m=bot.send_message(message.from_user.id, mes,reply_markup=reply_city())
            bot.register_next_step_handler(m,city_finish)
        def name_phone(message):
            users[message.from_user.id]={
                'name':message.text,
                'phone':'',
                'city':'',
                'category':''
                
            }
            mes='–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {}. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.'.format(message.text)
            m=bot.send_message(message.from_user.id, mes,reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(m,phone_city)
        if message.text=='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
            mes='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û'
            print(message)
            m=bot.send_message(message.from_user.id, mes,reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(m,name_phone)
        
    @bot.callback_query_handler(func = lambda call: True) 
    def add(message):
#         def price_finish(message):
#             zakazi[message.from_user.username]['price']=message.text
#             mes="""–í–∞—à–∞ –∑–∞—è–≤–∫–∞-{}
# –¶–µ–Ω–∞-{}
# –ö–∞—Ç–µ–≥–æ—Ä–∏—è-{}""".format(zakazi[message.from_user.username]['description'],zakazi[message.from_user.username]['price'],zakazi[message.from_user.username]['category'])
#             markup=types.InlineKeyboardMarkup()
#             markup.add(types.InlineKeyboardButton(text='–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É',callback_data='{},{},{}'.format(zakazi[message.from_user.username]['description'],zakazi[message.from_user.username]['price'],zakazi[message.from_user.username]['category'])))

#             markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞‚ùå',callback_data='otmena'))
#             f=bot.send_message(message.from_user.id,mes,reply_markup=markup)

#         def desc_price(message):
#             zakazi[message.from_user.username]['description']=message.text
#             f=bot.send_message(message.from_user.id,'–ù–∞–ø–∏—à–∏—Ç–µ,—Å–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞ —ç—Ç–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å.(–µ—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-")')
#             bot.register_next_step_handler(f,price_finish)

        if 'category' in message.data and message.from_user.id in users:
            cat=message.data.replace('category','')
            users[message.from_user.id]['category']=cat
            markup=types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='–°–æ–≥–ª–∞—Å–µ–Ω',callback_data='personal'))
            f=bot.send_message(message.from_user.id,'–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?',reply_markup=markup)
            
        if 'personal' in message.data and message.from_user.id in users :
            markup=types.InlineKeyboardMarkup()
            
            sql_query('INSERT INTO workers (name,phone,city,category,username,tid) VALUES ({},{},{},{},{},{})'.format(to_base(users[message.from_user.id]['name']),to_base(users[message.from_user.id]['phone']),to_base(users[message.from_user.id]['city']),to_base(users[message.from_user.id]['category']),to_base(message.from_user.id),to_base(message.from_user.id)))
            markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',callback_data='change data'))
            markup.add(types.InlineKeyboardButton(text='–ù–∞—à–∏ —Å–æ—Ü-—Å–µ—Ç–∏',callback_data='socset'))
            markup.add(types.InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É',callback_data='ispo'))

            f=bot.send_message(message.from_user.id,'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–∞, –≤ —ç—Ç–æ—Ç —á–∞—Ç –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞—è–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤. –ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüîΩ',reply_markup=markup)
            users.pop(message.from_user.id,1)
            
        if 'socset' in message.data:
            mes='–¢–µ–∫—Å—Ç —Å —Å–æ—Ü-—Å–µ—Ç—è–º–∏'
            markup=types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',callback_data='change data'))
            markup.add(types.InlineKeyboardButton(text='–ù–∞—à–∏ —Å–æ—Ü-—Å–µ—Ç–∏',callback_data='socset'))
            markup.add(types.InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É',callback_data='ispo'))
            f=bot.send_message(message.from_user.id,mes,reply_markup=markup)
        if 'ispo' in message.data:
            mes='–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º, –Ω–∞–ø–∏—à–∏—Ç–µ —ç—Ç—É–º—É –±–æ—Ç—É- @Glosi_bot'
            markup=types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',callback_data='change data'))
            markup.add(types.InlineKeyboardButton(text='–ù–∞—à–∏ —Å–æ—Ü-—Å–µ—Ç–∏',callback_data='socset'))
            markup.add(types.InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É',callback_data='ispo'))
            f=bot.send_message(message.from_user.id,mes,reply_markup=markup)
            
        if 'show' in message.data :
            dat=message.data.replace('show','').split(',')[1]
            sq=sql_query('SELECT * FROM orders WHERE id={}'.format(to_base(dat)))
            sq=sq[0]
            data=sq[3].split(',')
            
            mes="""–ò–º—è-{}
–ì–æ—Ä–æ–¥-{}
–ù–æ–º–µ—Ä-{}
–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É-[–°—Å—ã–ª–∫–∞](tg://user?id={})
""".format(data[1],data[0],data[2],data[3])
            bot.send_message(message.from_user.id,mes,parse_mode="Markdown")
            sq=sql_query("""UPDATE orders SET workers = array_append(workers,{}) WHERE id={}""".format(to_base(message.from_user.id),to_base(dat)))

        # if 'place order' in message.data:
        #     mes='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É(—Å–º–∞–π–ª–∏–∫)'
        #     # –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        #     m=bot.send_message(message.from_user.id, mes,reply_markup=config.get_categoryes())
        # if 'otmena' in message.data:
        #     mes='–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –µ–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ(—Å–º–∞–π–ª–∏–∫)'
        #     markup=types.InlineKeyboardMarkup()
        #     markup.add(types.InlineKeyboardButton(text='–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –µ—â–µ —Ä–∞–∑',callback_data='place order'))
        #     markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',callback_data='change personal')) 
        #     f=bot.send_message(message.from_user.id,mes,reply_markup=markup) 
            
        if 'change data' in message.data:
            markup=types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',callback_data='changes,phone'))
            markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è',callback_data='changes,name')) 
            markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥',callback_data='changes,city'))
            markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥',callback_data='changes,category'))

            f=bot.send_message(message.from_user.id,'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—É—â—É—é –∫–Ω–æ–ø–∫—ÉüîΩ',reply_markup=markup)
        if 'changes' in message.data:
            def change_data(message,do):
                try:
                    sql_query('UPDATE workers SET {}={} WHERE tid={} '.format(do,to_base(message.text),to_base(message.from_user.id)))
                    bot.send_message(message.from_user.id,'–£—Å–ø–µ—à–Ω–æ',reply_markup=types.ReplyKeyboardRemove())
                except Exception as e:
                    print(e)
            f=False
            do=message.data.split(',')[1]
            if do=='city':
                f=bot.send_message(message.from_user.id,'–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –Ω–∏–∂–µüîΩ',reply_markup=reply_city())
            elif do=='category':
                f=bot.send_message(message.from_user.id,'–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≥–æ—Ä–æ–¥ –Ω–∏–∂–µüîΩ',reply_markup=config.get_cat())

            else:
                
                rep={
                    'name':'–°–≤–æ–µ –∏–º—è',
                    'phone':'–°–≤–æ–π –Ω–æ–º–µ—Ä'
                }
                f=bot.send_message(message.from_user.id,'–ù–∞–ø–∏—à–∏ –º–Ω–µ {} '.format(rep[do]),reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(f,lambda message:change_data(message,do))


    bot.polling(none_stop=True)

  
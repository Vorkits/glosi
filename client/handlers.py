import telebot
from telebot import types
import psycopg2
import sqlite3
conn = sqlite3.connect("mydatabase.db")
bot = telebot.TeleBot('1123182125:AAGSp0qrIbpwo9Je4Lj-zAGA0OwsBq8S7jI')
w_bot = telebot.TeleBot('914404855:AAEoc0ye_05EMpMaD5m43kytpkPhOL54pHQ')
print('CCCCCLIIIIEEEENNNNTTTTccz')
import string
import random
def id_generator(size=10, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))
users={}
zakazi={}
to_base=lambda s:"'"+str(s)+"'"
def sql_query(sql):
    f=''
    try:
        conn = psycopg2.connect(dbname='dbl897lkr3kqj0', user='gyvyzqvrydwlxe', 
                                password='44826dd7802986c134535b8c9724edbe06185e69c372d144a0f554ad59bdf040', host='ec2-79-125-26-232.eu-west-1.compute.amazonaws.com')
        conn.autocommit = True

        cur = conn.cursor()
        cur.execute(sql)
        f=cur.fetchall()
        conn.close()
    except Exception as e:
        print (e)
    try:
        conn.close()
    except:
        print()
    return f

def reply_city():
    markup=types.ReplyKeyboardMarkup(one_time_keyboard = True)
    cities=['–ê–ª–º–∞—Ç—ã','–ê—Å—Ç–∞–Ω–∞(–ù—É—Ä-–°—É–ª—Ç–∞–Ω)','–ö–∞—Ä–∞–≥–∞–Ω–¥–∞','–ê–∫—Ç–∞—É','–®—ã–º–∫–µ–Ω—Ç','–õ—Ä—É–≥–æ–π']
    for i in cities:
        markup.add(i)
    return markup

def start_bot(config):
    def showcategory(message):
        bot.send_message(message.from_user.id,' ',reply_markup=config.get_categoryes())
    @bot.message_handler(commands=['start'])
    def start_message(message):
        mes=config.main_message
        reply=types.ReplyKeyboardMarkup(resize_keyboard=True)
        reply.add('–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É-')
        bot.send_message(message.from_user.id, mes,reply_markup=reply)
    @bot.message_handler(content_types=['text'])
    def text(message):
        def city_finish(message):
            users[message.from_user.id]['city']=message.text
            sql_query('INSERT INTO users (name,phone,city,username,tid) VALUES ({},{},{},{},{})'.format(to_base(users[message.from_user.id]['name']),to_base(users[message.from_user.id]['phone']),to_base(users[message.from_user.id]['city']),to_base(message.from_user.username),to_base(message.from_user.id)))
            mes='–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—Éüõ†'
            users.pop(message.from_user.id,1)
            m=bot.send_message(message.from_user.id, mes,reply_markup=config.get_categoryes())
        def phone_city(message):
            users[message.from_user.id]['phone']=message.text
            mes='–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µüîΩ'
            # –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
            m=bot.send_message(message.from_user.id, mes,reply_markup=reply_city())
            bot.register_next_step_handler(m,city_finish)
        def name_phone(message):
            users[message.from_user.id]={
                'name':message.text,
                'phone':'',
                'city':'',
                'choice':0
            }
            mes='–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {}. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n(–µ—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Å–≤—è–∑—ã–≤–∞–ª–∏—Å—å —Å –≤–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º)'.format(message.text)
            m=bot.send_message(message.from_user.id, mes,reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(m,phone_city)
        if message.text=='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É-':
            mes='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è'
            print(message)
            m=bot.send_message(message.from_user.id, mes,reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(m,name_phone)
        
    @bot.callback_query_handler(func = lambda call: True) 
    def add(message):
        if 'choice' in message.data and message.from_user.id in zakazi:
            zakazi[message.from_user.id]['choice']=int(message.data[7])
            mes="""–í–∞—à–∞ –∑–∞—è–≤–∫–∞-{}
–¶–µ–Ω–∞-{}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è-{}""".format(zakazi[message.from_user.id]['description'],zakazi[message.from_user.id]['price'],zakazi[message.from_user.id]['category'])
            markup=types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É',callback_data='plae'))

            markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞‚ùå',callback_data='otmena'))
            f=bot.send_message(message.from_user.id,mes,reply_markup=markup)
        def price_choise(message):
            zakazi[message.from_user.id]['price']=message.text
            mes='–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤?'
            markup=types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='–î–∞',callback_data='choice,1'))
            markup.add(types.InlineKeyboardButton(text='–ù–µ—Ç',callback_data='choice,0'))
            f=bot.send_message(message.from_user.id,mes,reply_markup=markup)

        def desc_price(message):
            zakazi[message.from_user.id]['description']=message.text
            f=bot.send_message(message.from_user.id,'–ù–∞–ø–∏—à–∏—Ç–µ,—Å–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞ —ç—Ç–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å.üí∞(–µ—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-")')
            bot.register_next_step_handler(f,price_choise)
        if 'change personal' in message.data:
            markup=types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',callback_data='changes,phone'))
            markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è',callback_data='changes,name')) 
            markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥',callback_data='changes,city'))
            f=bot.send_message(message.from_user.id,'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—É—â—É—é –∫–Ω–æ–ø–∫—ÉüîΩ',reply_markup=markup)
        if 'changes' in message.data:
            def change_data(message,do):
                try:
                    sql_query('UPDATE users SET {}={} WHERE tid={} '.format(do,to_base(message.text),to_base(message.from_user.id)))
                    markup=types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton(text='–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –µ—â–µ —Ä–∞–∑',callback_data='place order'))
                    markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',callback_data='change personal')) 
                    bot.send_message(message.from_user.id,'–£—Å–ø–µ—à–Ω–æ',reply_markup=markup)
                except Exception as e:
                    print(e)
            f=False
            do=message.data.split(',')[1]
            if do=='city':
                f=bot.send_message(message.from_user.id,'–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –Ω–∏–∂–µüîΩ',reply_markup=reply_city())
            else:
                
                rep={
                    'name':'–°–≤–æ–µ –∏–º—è',
                    'phone':'–°–≤–æ–π –Ω–æ–º–µ—Ä'
                }
                f=bot.send_message(message.from_user.id,'–ù–∞–ø–∏—à–∏ –º–Ω–µ {} '.format(rep[do]),reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(f,lambda message:change_data(message,do))

        if 'category' in message.data:
            cat=message.data.replace('category','')
            zakazi[message.from_user.id]={'category':cat,'price':'','description':''}
            f=bot.send_message(message.from_user.id,'–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∞—è –≤–∞–º –Ω—É–∂–Ω–∞ —É—Å–ª—É–≥–∞üõ†',reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(f,desc_price)
        if 'place order' in message.data:
            mes='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—ÉüîΩ'
            # –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
            m=bot.send_message(message.from_user.id, mes,reply_markup=config.get_categoryes())
        if 'otmena' in message.data:
            mes='–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –µ–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüîΩ'
            markup=types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –µ—â–µ —Ä–∞–∑',callback_data='place order'))
            markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',callback_data='change personal')) 
            f=bot.send_message(message.from_user.id,mes,reply_markup=markup)
        if 'plae' in message.data and message.from_user.id in zakazi:
            mes='–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º, –æ–Ω–∏ –≤ –∫—Ä–∞—Ç—á–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏.\n–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!'
            markup=types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –µ—â–µ —Ä–∞–∑',callback_data='place order'))
            markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',callback_data='change personal')) 

            f=bot.send_message(message.from_user.id,mes,reply_markup=markup)
            
            sq=sql_query('SELECT city,name,phone from users WHERE tid={}'.format(to_base(message.from_user.id)))
            city=sq[0][0]
            name=sq[0][1]
            phone=sq[0][2]
            if zakazi[message.from_user.id]['choice']:
                sq=sql_query('SELECT tid from workers WHERE category={}'.format(to_base(zakazi[message.from_user.id]['category'])))
            else:
                sq=sql_query('SELECT tid from workers WHERE category={} AND city={}'.format(to_base(zakazi[message.from_user.id]['category']),to_base(city)))
            rstr=id_generator()
            markup=types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã',callback_data='show,{}'.format(rstr)))
            print(sq)
            data='{},{},{},{},{}'.format(city,name,phone,message.from_user.id,zakazi[message.from_user.id]['description'])
            sql_query("""INSERT INTO orders VALUES({},{},{},{},{})""".format(to_base(rstr),to_base(message.from_user.id),to_base('{}'),to_base(data),0))
            print('show{},{},{},{}'.format(city,name,phone,message.from_user.id))
            mes="""
            –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
            
–û–ø–∏—Å–∞–Ω–∏–µ-{}
–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å-{}
–ì–æ—Ä–æ–¥-{}""".format(to_base(zakazi[message.from_user.id]['description']),to_base(zakazi[message.from_user.id]['price']),to_base(city))
            used=[]
            for i in sq:
                
                id=i[0]
                if id not in used:
                    w_bot.send_message(id,mes,reply_markup=markup)
                used.append(id)
            zakazi.pop(message.from_user.id)
                
        if 'feed' in message.data:
            markup=types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='‚≠ê',callback_data='star,1'))
            markup.add(types.InlineKeyboardButton(text='‚≠ê‚≠ê',callback_data='star,2'))
            markup.add(types.InlineKeyboardButton(text='‚≠ê‚≠ê‚≠ê',callback_data='star,3'))
            markup.add(types.InlineKeyboardButton(text='‚≠ê‚≠ê‚≠ê‚≠ê',callback_data='star,4'))
            markup.add(types.InlineKeyboardButton(text='‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê',callback_data='star,5'))
            bot.send_message(message.from_user.id,'–ö–∞–∫—É—é –æ—Ü–µ–Ω–∫—É –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –µ–º—É?',reply_markup=markup)
        if 'star' in message.data:
            markup=types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –µ—â–µ —Ä–∞–∑',callback_data='place order'))
            markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',callback_data='change personal')) 
            bot.send_message(message.from_user.id,'–°–ø–∞—Å–∏–±–æ,–≤–∞—à –æ—Ç–∑—ã–≤ –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å.',reply_markup=markup)


    bot.polling(none_stop=True)

  